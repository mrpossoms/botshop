#pragma once
#include "core.h"
#include "geo.hpp"
#include "world.hpp"

extern dWorldID ODE_CURRENT_WORLD;

namespace botshop
{

class Joint;
class Body;

class Body : public Dynamic, Attachable
{
	protected:
		// used to group objects and speed up collision detection. A space will
		// be generated by the root Body and propogated to its children
		dSpaceID ode_body_space;

	public:
		Body(World& world);
		~Body();

		dWorldID world;
		dSpaceID space;

		dBodyID ode_body;
		dGeomID ode_geo;
		dMass   ode_mass;

		Body* parent;
		STLModel* model;

		std::vector<Body*> welded_children;
		std::vector<Joint*> jointed_children;
		std::vector<dJointID> joints;

		void add_all();
		void remove_all();

		void on_attached(const Attachable* parent);

		Body* attach(Joint* joint);
		Body* attach(Body* body);

		Body* is_a_box(float width, float height, float length);
		Body* is_a_sphere(float radius);
		Body* is_a_mesh(Model& model);
		Body* is_a_mesh(Model* model);

		// Dynamic Interface
		Vec3 position();
		Body* position(Vec3& pos);
		Body* position(float x, float y, float z);

		Quat orientation();
		Body* orientation(Quat& ori);

		Vec3 velocity();
		Body* velocity(Vec3& vel);

		Vec3 force();
		Body* force(Vec3& force);
		Body* force(float x, float y, float z);

		Vec3 torque();
		Body* torque(float x, float y, float z);
		Body* torque(Vec3& torque);

		dMass mass();
		Body* mass(float mass);

		void rotation(mat3x3 rot);
		void matrix(mat4x4 world);

		Body* operator+(Joint* joint);
};


class Joint : public Attachable
{
public:
	Joint(Body& body, dJointID joint);

	dJointID ode_joint;
	Body* body;

	Joint* at(Vec3 anchor);

	void on_attached(const Attachable* parent);

	static Joint* wheel(Body& body, Vec3 steer_axis, Vec3 axle_axis);
private:
	Vec3 steer_axis;
	Vec3 axle_axis;
};

}
